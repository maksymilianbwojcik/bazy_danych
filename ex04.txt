4.

CREATE TABLE ex04.tableB AS SELECT ex04.popp.* 
FROM ex04.popp, ex04.majrivers 
WHERE popp.f_codedesc LIKE 'Building' 
GROUP BY popp.gid 
HAVING MIN(ST_Distance(majrivers.geom, popp.geom)) < 100000;

SELECT COUNT(gid) FROM ex04.tableB;

5.

CREATE TABLE ex04.airportsNew(gid SERIAL, name VARCHAR(50), geom GEOMETRY, elev NUMERIC);
INSERT INTO ex04.airportsNew (name, geom, elev) SELECT name, geom, elev FROM ex04.airports;

a)

SELECT ex04.airportsNew.*, ST_Y(geom) AS y 
FROM ex04.airportsNew 
ORDER BY y DESC LIMIT 1;

SELECT ex04.airportsNew.*, ST_Y(geom) AS y 
FROM ex04.airportsNew 
ORDER BY y LIMIT 1;

b)

INSERT INTO ex04.airportsNew(name, geom, elev) VALUES
('airportB', 
CONCAT('Point(',
    (SELECT((SELECT ST_Y(geom) FROM ex04.airportsNew ORDER BY ST_Y(geom) DESC LIMIT 1) + (SELECT ST_Y(geom) FROM ex04.airportsNew ORDER BY ST_Y(geom) LIMIT 1))/2),
	' ',
	(SELECT((SELECT ST_X(geom) AS x FROM ex04.airportsNew ORDER BY x DESC LIMIT 1) + (SELECT ST_X(geom) AS x FROM ex04.airportsNew ORDER BY x LIMIT 1))/2),
    ')'),
2137);

6.

SELECT ST_Area(ST_Buffer(ST_ShortestLine((SELECT geom FROM ex04.lakes WHERE names LIKE 'Iliamna Lake'),(SELECT geom FROM ex04.airports WHERE name LIKE 'AMBLER')), 1000));

7.

SELECT vegdesc, SUM(area_km2) 
FROM (SELECT vegdesc, trees.area_km2 FROM ex04.trees JOIN ex04.tundra ON trees.geom = tundra.geom) AS trees_tundra 
GROUP BY vegdesc;

SELECT vegdesc, SUM(area_km2) 
FROM (SELECT vegdesc, trees.area_km2 FROM ex04.trees JOIN ex04.swamp ON trees.geom = swamp.geom) AS trees_swamp 
GROUP BY vegdesc;
